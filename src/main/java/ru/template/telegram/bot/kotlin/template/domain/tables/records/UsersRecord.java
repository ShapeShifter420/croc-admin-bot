/*
 * This file is generated by jOOQ.
 */
package ru.template.telegram.bot.kotlin.template.domain.tables.records;


import javax.annotation.Nonnull;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import ru.template.telegram.bot.kotlin.template.domain.tables.Users;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersRecord extends UpdatableRecordImpl<UsersRecord> implements Record4<Long, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.users.id</code>.
     */
    public void setId(@Nonnull Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.users.id</code>.
     */
    @Nonnull
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.users.step_code</code>.
     */
    public void setStepCode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.users.step_code</code>.
     */
    public String getStepCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.users.text</code>.
     */
    public void setText(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.users.text</code>.
     */
    public String getText() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.users.accept</code>.
     */
    public void setAccept(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.users.accept</code>.
     */
    public String getAccept() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    @Nonnull
    public Row4<Long, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    @Nonnull
    public Field<Long> field1() {
        return Users.USERS.ID;
    }

    @Override
    @Nonnull
    public Field<String> field2() {
        return Users.USERS.STEP_CODE;
    }

    @Override
    @Nonnull
    public Field<String> field3() {
        return Users.USERS.TEXT;
    }

    @Override
    @Nonnull
    public Field<String> field4() {
        return Users.USERS.ACCEPT;
    }

    @Override
    @Nonnull
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getStepCode();
    }

    @Override
    public String component3() {
        return getText();
    }

    @Override
    public String component4() {
        return getAccept();
    }

    @Override
    @Nonnull
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getStepCode();
    }

    @Override
    public String value3() {
        return getText();
    }

    @Override
    public String value4() {
        return getAccept();
    }

    @Override
    @Nonnull
    public UsersRecord value1(@Nonnull Long value) {
        setId(value);
        return this;
    }

    @Override
    @Nonnull
    public UsersRecord value2(String value) {
        setStepCode(value);
        return this;
    }

    @Override
    @Nonnull
    public UsersRecord value3(String value) {
        setText(value);
        return this;
    }

    @Override
    @Nonnull
    public UsersRecord value4(String value) {
        setAccept(value);
        return this;
    }

    @Override
    @Nonnull
    public UsersRecord values(@Nonnull Long value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UsersRecord
     */
    public UsersRecord() {
        super(Users.USERS);
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    public UsersRecord(@Nonnull Long id, String stepCode, String text, String accept) {
        super(Users.USERS);

        setId(id);
        setStepCode(stepCode);
        setText(text);
        setAccept(accept);
    }
}
